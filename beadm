#!/bin/sh -e
# Copyright (c) 2016 Kris Moore (kmoore)
# Copyright (c) 2012-2015 Slawomir Wojciech Wojtczak (vermaden)
# Copyright (c) 2012-2013 Bryan Drewery (bdrewery)
# Copyright (c) 2012-2013 Mike Clarke (rawthey)
# Copyright (c) 2013      Dancho Penev (dpslavov)
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that following conditions are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS 'AS IS' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

unset LC_ALL
unset LANG
PATH=${PATH}:/bin:/usr/bin:/usr/local/bin:/sbin:/usr/sbin:/usr/local/sbin

if [ $( uname -r | cut -d '-' -f1 | cut -d '.' -f1 ) -lt 8 ]
then
  echo "ERROR: beadm works on FreeBSD 8.0 or later"
  exit 1
fi

if [ "${1}" = "--version" -o "${1}" = "version" ]
then
  echo "beadm 1.2.6 2015/09/17"
  exit 0
fi

__usage() {
  local NAME=${0##*/}
  echo "usage:"
  echo "  ${NAME} activate [-n] <beName>"
  echo "  ${NAME} create [-r] [-e nonActiveBe | -e beName@snapshot] <beName>/<beName@snapshot> [nickname]"
  echo "  ${NAME} destroy [-F] [-n] <beName | beName@snapshot | nickname>"
  echo "  ${NAME} export <beName> <file>"
  echo "  ${NAME} import <file> <beName>"
  echo "  ${NAME} list [-a] [-s] [-D] [-H]"
  echo "  ${NAME} rename [-n] <origBeName> <newBeName>"
  echo "  ${NAME} mount [-n] <beName> [mountpoint]"
  echo "  ${NAME} { umount | unmount } [-f] [-n] <beName>"
  exit 1
}

# Check if we need to run any boot config to activate new BE
__check_boot_updates() {
  # check if we need to update grub
  __update_grub

}

# check if system has a grub.cfg file and update it
__update_grub() {
  if [ -e /boot/grub/grub.cfg ]
  then
    if grub-mkconfig -o /boot/grub/grub.cfg 1> /dev/null 2> /dev/null
    then
      echo "GRUB configuration updated successfully"
    else
      echo "WARNING: Failed to update GRUB configuration"
    fi
  fi
}

# Init the nicknames
__init_nicks() {
  zfs get -d 1 -H -o name,value beadm:nickname ${POOL}/${BEDS} | grep -v '@' | while read nLine
  do
    # Make sure we have a BE / dataset here
    if [ -z "`echo ${nLine} | cut -d '/' -f 3`" ]
    then
      continue
    fi
    be="`echo ${nLine} | awk '{print $1}'`"
    nick="`echo ${nLine} | awk '{print $2}'`"
    benick="`echo ${be} | cut -d '/' -f 3`"
    BENICKNAME="`echo ${be} | rev | cut -d "/" -f 1 | rev`"
    if [ "$nick" != "-" ]
    then
      continue
    fi
    if __be_nickname_exist "${benick}"
    then
      benick="${benick}-1"
      if __be_nickname_exist "${benick}"
      then
        continue
      fi
    fi
    if ! zfs set beadm:nickname="${benick}" ${be}
    then
        continue
    fi
  done
}

# check if boot environment exists
__be_exist() { # 1=DATASET
  if ! zfs list -H -o name ${1} 1> /dev/null 2> /dev/null
  then
    echo "ERROR: Boot environment '${1##*/}' does not exist"
    exit 1
  fi
}

# check if boot environment nickname exists
__be_nickname_exist() { # 1=NICKNAME
  if ! zfs get -d 2 -H -o value beadm:nickname ${POOL}/${BEDS} | grep -q "^${1}\$"
  then
    return 1
  fi
  return 0
}

__be_get_nickname() {
  if ! zfs get -d 1 -H -o value beadm:nickname ${1} | awk '{print $1}' | head -n 1 | sed 's|-||g' 2>/dev/null
  then
     return 1
  fi
  BENICKNAME=`zfs get -d 1 -H -o value beadm:nickname ${1} | head -n 1 | sed 's|-||g'`
  if [ -z "$BENICKNAME" ] ; then
    return 1
  else
    return 0
  fi
}

# Convert a BE nickname to dataset
__convert_be_nickname() { # 1=NICKNAME
  if ! zfs get -d 2 -H -o value,name beadm:nickname ${POOL}/${BEDS} | grep -w "^${1}" | awk '{print $1}' | head -n 1 | sed "s|${POOL}/${BEDS}/||g" > /dev/null 2> /dev/null
  then
    return 1
  fi

  NICKDATASET=`zfs get -d 2 -H -o value,name beadm:nickname ${POOL}/${BEDS} | grep -v '@' | tr '\t' ' ' | grep "^${1} " | sed "s|^${1} ||g" | awk 'NF<=1' | sed "s|${POOL}/${BEDS}/||g"`
  if zfs get -d 2 -H -o value beadm:nickname ${POOL}/${BEDS} | grep -q -w "^$1\$"
  then
    return 0
  else
    return 1
  fi
}

# check if argument is a snapshot
__be_snapshot() { # 1=DATASET/SNAPSHOT
  echo "${1}" | grep -q "@" 2> /dev/null
}

# check if boot environment is mounted
__be_mounted() { # 1=BE
  mount 2> /dev/null | grep -q -E "^${1} " 2> /dev/null
}

# check if boot environment is a clone
__be_clone() { # 1=DATASET
  if zfs list ${1} 1> /dev/null 2> /dev/null
  then
    local ORIGIN="$( zfs list -H -o origin ${1} )"
    if [ "${ORIGIN}" = "-" ]
    then
      # boot environment is not a clone
      return 1
    else
      # boot environment is a clone
      return 0
    fi
  else
    # boot environment does not exist
    return 2
  fi
}

# create new boot environment
__be_new() { # 1=SOURCE 2=TARGET
  local NAME_NEW=$( basename "${2}" )
  local NAME_SANITY=$( echo "${NAME_NEW}" | tr -c -d 'a-zA-Z0-9-_.,' )
  if [ "${NAME_NEW}" != "${NAME_SANITY}" ]
  then
    echo "ERROR: Can not create boot environment with '${NAME_NEW}' name"
    echo
    echo "Allowed characters for boot environment are:"
    echo "  alphanumeric characters: 'a-z' 'A-Z' '0-9'"
    echo "  hypen: '-'"
    echo "  underscore: '_'"
    echo "  dot: '.'"
    echo "  comma: ','"
    echo
    echo "Name '${NAME_SANITY}' which uses only allowed characters can be used"
    echo
    exit 1
  fi
  unset NAME_NEW
  unset NAME_SANITY
  local SOURCE=$( echo ${1} | cut -d '@' -f 1 )
  local NICKNAME="$BENICK"

  # If we are replacing a nickname
  if [ ${REPLACEBENICK} -eq 1 ]
  then
    if ! zfs set beadm:nickname="${OLDBENICK}" ${SOURCE}
    then
      echo "ERROR: Unable to reset nickname!"
      exit 1
    fi
  fi

  local ENTROPY=0
  # secure current /boot/entropy file
  if [ -f /boot/entropy ]
  then
    if ! cp -p /boot/entropy /boot/entropy.OLD 1> /dev/null 2> /dev/null
    then
      echo "ERROR: Can not copy current '/boot/entropy' file"
      exit 1
    fi
    ENTROPY=1
  fi
  # create new /boot/entropy file that would be used in new boot environment
  if ! dd if=/dev/random of=/boot/entropy bs=4096 count=1 1> /dev/null 2> /dev/null
  then
    echo "ERROR: Can not generate new '/boot/entropy' file"
    exit 1
  fi
  # create snapshot that will be used as a base for new boot environment
  if __be_snapshot ${1}
  then
    # create boot environment from snapshot
    local SNAPSHOT=$( echo ${1} | cut -d '@' -f 2 )
    zfs list -r -H -t filesystem -o name ${SOURCE} \
      | while read FS
        do
          if ! zfs list -H -o name ${FS}@${SNAPSHOT} 1> /dev/null 2> /dev/null
          then
            echo "ERROR: Child snapshot '${FS}@${SNAPSHOT}' does not exist"
            if [ ${ENTROPY} -ne 0 ]
            then
              if ! mv /boot/entropy.OLD /boot/entropy 1> /dev/null 2> /dev/null
              then
                echo "WARNING: Can not bring back original '/boot/entropy' file"
              fi
            fi
            exit 1
          fi
        done
  else
    # create boot environment from other boot environment
    if zfs list -H -o name ${1}@${2##*/} 1> /dev/null 2> /dev/null
    then
      echo "ERROR: Snapshot '${1}@${2##*/}' already exists"
      if [ ${ENTROPY} -ne 0 ]
      then
        if ! mv /boot/entropy.OLD /boot/entropy 1> /dev/null 2> /dev/null
        then
          echo "WARNING: Can not bring back original '/boot/entropy' file"
        fi
      fi
      exit 1
    fi
    # snapshot format
    FMT=$( date "+%Y-%m-%d-%H:%M:%S" )
    if ! zfs snapshot -r ${1}@${FMT} 1> /dev/null 2> /dev/null
    then
      echo "ERROR: Cannot create snapshot '${1}@${FMT}'"
      if [ ${ENTROPY} -ne 0 ]
      then
        if ! mv /boot/entropy.OLD /boot/entropy 1> /dev/null 2> /dev/null
        then
          echo "WARNING: Can not bring back original '/boot/entropy' file"
        fi
      fi
      exit 1
    fi
  fi
  # bring back secured /boot/entropy.OLD file
  if [ -f /boot/entropy.OLD ]
  then
    if ! mv /boot/entropy.OLD /boot/entropy 1> /dev/null 2> /dev/null
    then
      echo "WARNING: Can not bring back original '/boot/entropy' file"
    fi
  fi
  unset ENTROPY
  # clone properties of source boot environment
  zfs list -H -o name -r ${SOURCE} \
    | grep -v '@' \
    | while read FS
      do
        local OPTS=""
        while read NAME PROPERTY VALUE
        do
          if [ "${PROPERTY}" = "sharenfs" ]
          then
            local OPTS="-o ${PROPERTY}=\"${VALUE}\" ${OPTS}"
          else
            local OPTS="-o ${PROPERTY}=${VALUE} ${OPTS}"
          fi
        done << EOF
$( zfs get -o name,property,value -s local,received -H all ${FS} | awk '!/[\t ]canmount[\t ]/' | awk '!/[\t ]beadm:nickname[\t ]/')
EOF
        DATASET=$( echo ${FS} | awk '{print $1}' | sed -E s/"^${POOL}\/${BEDS}\/${SOURCE##*/}"/"${POOL}\/${BEDS}\/${2##*/}"/g )
        if [ "${OPTS}" = "-o = " ]
        then
          local OPTS=""
        fi
        if __be_snapshot ${1}
        then
          eval "zfs clone -o canmount=off ${OPTS} ${FS}@${1##*@} ${DATASET}"
        else
          eval "zfs clone -o canmount=off ${OPTS} ${FS}@${FMT} ${DATASET}"
        fi
        # Set nickname
        if [ -n "${NICKNAME}" ]
        then
          if ! zfs set beadm:nickname="${NICKNAME}" ${DATASET}
          then
            echo "WARNING: Unable to set nickname!"
          fi
        fi
      done
      __check_boot_updates
}

ROOTFS=$( mount | awk '/ \/ / {print $1}' )

if echo ${ROOTFS} | grep -q -m 1 -E "^/dev/"
then
  echo "ERROR: This system does not boot from ZFS pool"
  exit 1
fi

POOL=$( echo ${ROOTFS} | awk -F '/' '{print $1}' )

if [ $( echo ${ROOTFS} | awk -F '/' '{print NF}' ) -lt 3 ]
then
  echo "ERROR: This system is not configured for boot environments"
  exit 1
fi

BOOTFS=$( zpool list -H -o bootfs ${POOL} )

if [ -z "${BOOTFS}" -o "${BOOTFS}" = "-" ]
then
 echo "ERROR: ZFS boot pool '${POOL}' has unset 'bootfs' property"
 exit 1
fi

if [ -f /usr/local/etc/beadm.conf ]
then
  . /usr/local/etc/beadm.conf
fi

# update GRUB bootloader instead of FreeBSD's loader(8)
: ${GRUB="NO"}

# Use NICKNAME as the source of truth when referencing BEs
: ${NICKNAME_ONLY="NO"}

# use other prefix then the 'pool/ROOT/bename' default
: ${BEDS="$( echo ${ROOTFS} | awk -F '/' '{print $2}' )"}

# Init the nickname system for all BEs
__init_nicks

case ${1} in

  (list) # --------------------------------------------------------------------
    OPTION_a=0
    OPTION_D=0
    OPTION_H=0
    OPTION_r=0
    OPTION_s=0
    shift
    while getopts "aDHrs" OPT
    do
      case ${OPT} in
        (a) OPTION_a=1 ;;
        (D) OPTION_D=1 ;;
        (H) OPTION_H=1 ;;
        (s) OPTION_s=1
            OPTION_a=1 ;;
        (*) __usage    ;;
      esac
    done
    awk -v POOL="${POOL}" \
        -v BEDS="${BEDS}" \
        -v ROOTFS="${ROOTFS}" \
        -v BOOTFS="${BOOTFS}" \
        -v OPTION_a="${OPTION_a}" \
        -v OPTION_D="${OPTION_D}" \
        -v OPTION_H="${OPTION_H}" \
        -v OPTION_s="${OPTION_s}" \
     'function __normalize(VALUE) {
        if(VALUE == "-" || VALUE == 0)
          return 0
        else
          return substr(VALUE, 1, length(VALUE) - 1) * MULTIPLIER[substr(VALUE, length(VALUE))]
      }
      function __show_units(VALUE) {
             if(VALUE < 1024)                {                               UNIT = "K"; }
        else if(VALUE < 1048576)             { VALUE /= 1024;                UNIT = "M"; }
        else if(VALUE < 1073741824)          { VALUE /= 1048576;             UNIT = "G"; }
        else if(VALUE < 1099511627776)       { VALUE /= 1073741824;          UNIT = "T"; }
        else if(VALUE < 1125899906842624)    { VALUE /= 1099511627776;       UNIT = "P"; }
        else if(VALUE < 1152921504606846976) { VALUE /= 1125899906842624;    UNIT = "E"; }
        else                                 { VALUE /= 1152921504606846976; UNIT = "Z"; }
        return sprintf("%.1f%s", VALUE, UNIT)
      }
      function __get_bename(BENAME) {
        sub(BENAME_BEGINS_WITH "\/", "", BENAME)
        sub("/.*", "", BENAME)
        return BENAME
      }
      function __convert_date(DATE) {
        CMD_DATE = "date -j -f \"%a %b %d %H:%M %Y\" \"" DATE "\" +\"%Y-%m-%d %H:%M\""
        CMD_DATE | getline NEW
        close(CMD_DATE)
        return NEW
      }
      BEGIN {
        BENAME_BEGINS_WITH = POOL "/" BEDS
        MULTIPLIER["K"] = 1
        MULTIPLIER["M"] = 1024
        MULTIPLIER["G"] = 1048576
        MULTIPLIER["T"] = 1073741824
        MULTIPLIER["P"] = 1099511627776
        MULTIPLIER["E"] = 1125899906842624
        MULTIPLIER["Z"] = 1152921504606846976
        MOUNTPOINT_LENGTH = 10
        FSNAME_LENGTH = 2
        if(OPTION_a == 1)
          FSNAME_LENGTH = 19
        CMD_MOUNT="mount"
        while(CMD_MOUNT | getline)
          if($1 ~ "^" BENAME_BEGINS_WITH)
            MOUNTS[$1] = $3
        close(CMD_MOUNT)
        FS = "\\t"
        CMD_ZFS_LIST = "zfs list -H -t filesystem,snapshot,volume -s creation -o name,used,usedds,usedbysnapshots,usedrefreserv,refer,creation,origin -r "
        while(CMD_ZFS_LIST BENAME_BEGINS_WITH | getline) {
          if($1 != BENAME_BEGINS_WITH) {
            FSNAME = $1
            FSNAMES[length(FSNAMES) + 1] = FSNAME
            USED              = __normalize($2)
            USEDBYDATASET     = __normalize($3)
            USEDBYSNAPSHOTS   = __normalize($4)
            USEDREFRESERV     = __normalize($5)
            REFER[FSNAME]     = __normalize($6)
            CREATIONS[FSNAME] = $7
            ORIGINS[FSNAME]   = $8
            if(FSNAME ~ /@/)
              SPACES[FSNAME] = USED
            else {
              SPACES[FSNAME] = USEDBYDATASET + USEDREFRESERV
              if(OPTION_D != 1)
                SPACES[FSNAME] += USEDBYSNAPSHOTS
              BE = " " __get_bename(FSNAME) " "
              if(index(BELIST, BE) == 0)
                BELIST = BELIST " " BE
              MOUNTPOINT = MOUNTS[FSNAME]
              if(MOUNTPOINT) {
                if((OPTION_a == 0 && FSNAME == (BENAME_BEGINS_WITH "/" __get_bename(FSNAME))) || (OPTION_a == 1)) {
                  LM = length(MOUNTPOINT)
                  if(LM > MOUNTPOINT_LENGTH)
                    MOUNTPOINT_LENGTH = LM
                }
              }
              else
                MOUNTPOINT = "-"
            }
            if(OPTION_a == 1)
              LF = length(FSNAME)
            else if(FSNAME !~ /@/)
              LF = length(__get_bename(FSNAME))
            if(LF > FSNAME_LENGTH)
              FSNAME_LENGTH = LF
          }
        }
        close(CMD_ZFS_LIST)
        split(BELIST, BENAMES, " ")
        if(OPTION_a == 1) {
          BE_HEAD = "BE/Dataset/Snapshot"
          printf "%-" FSNAME_LENGTH + 2 "s %-6s %-" MOUNTPOINT_LENGTH "s %6s %s\n", BE_HEAD, "Active", "Mountpoint", "Space", "Created"
        }
        else if(OPTION_H == 1)
          BE_HEAD = ""
        else {
          BE_HEAD = "BE"
          printf "%-" FSNAME_LENGTH "s %-6s %-" MOUNTPOINT_LENGTH "s %6s %s\t\t %s\n", BE_HEAD, "Active", "Mountpoint", "Space", "Created", "Nickname"
        }
        if(OPTION_s != 1)
          SNAPSHOT_FILTER = "(/[^@]*)?$"
        for(I = 1; I <= length(BENAMES); I++) {
          BENAME = BENAMES[I]
	  DATASETNAME=BENAME
          CMD_ZFS_NICK = "zfs get -d 2 -H -o value beadm:nickname " POOL "/" BEDS "/" BENAME
          while(CMD_ZFS_NICK | getline) {
	    if ($1 != "-")
	        BENAME=$1
	    else
	        BENAME=""
	  }

          if(OPTION_a == 1) {
            printf "\n"
            print DATASETNAME
            for(J = 1; J <= length(FSNAMES); J++) {
              FSNAME = FSNAMES[J]
              if(FSNAME ~ "^" BENAME_BEGINS_WITH "/" DATASETNAME SNAPSHOT_FILTER) {
                ACTIVE = ""
                if(FSNAME == ROOTFS)
                  ACTIVE = ACTIVE "N"
                if(FSNAME == BOOTFS)
                  ACTIVE = ACTIVE "R"
                if(! ACTIVE)
                  ACTIVE = "-"
                MOUNTPOINT = MOUNTS[FSNAME]
                if(! MOUNTPOINT)
                  MOUNTPOINT = "-"
                printf "  %-" FSNAME_LENGTH "s %-6s %-" MOUNTPOINT_LENGTH "s %6s %s\n", FSNAME, ACTIVE, MOUNTPOINT, __show_units(SPACES[FSNAME]), __convert_date(CREATIONS[FSNAME])
                ORIGIN = ORIGINS[FSNAME]
                ORIGIN_DISPLAY = ORIGIN
                sub(BENAME_BEGINS_WITH "/", "", ORIGIN_DISPLAY)
                if(ORIGIN != "-") {
                  if(OPTION_D == 1)
                    SPACE = REFER[ORIGIN]
                  else
                    SPACE = SPACES[ORIGIN]
                  printf  "  %-" FSNAME_LENGTH "s %-6s %-" MOUNTPOINT_LENGTH "s %6s %s\n", "  " ORIGIN_DISPLAY, "-", "-", __show_units(SPACE), __convert_date(CREATIONS[ORIGIN])
                }
              }
            }
          }
          else {
            SPACE = 0
            ACTIVE = ""
            NAME = BENAME_BEGINS_WITH "/" DATASETNAME
            if(NAME == ROOTFS)
              ACTIVE = ACTIVE "N"
            if(NAME == BOOTFS)
              ACTIVE = ACTIVE "R"
            if(! ACTIVE)
              ACTIVE = "-"
            for(J = 1; J <= length(FSNAMES); J++) {
              FSNAME = FSNAMES[J]
              if(FSNAME ~ "^" BENAME_BEGINS_WITH "/" DATASETNAME "(/[^@]*)?$") {
                if((BENAME_BEGINS_WITH "/" DATASETNAME) == FSNAME) {
                  MOUNTPOINT = MOUNTS[FSNAME]
                  if(! MOUNTPOINT)
                    MOUNTPOINT = "-"
                  CREATION = __convert_date(CREATIONS[FSNAME])
                }
                ORIGIN = ORIGINS[FSNAME]
                if(ORIGIN == "-")
                  SPACE += SPACES[FSNAME]
                else {
                  if(OPTION_D == 1)
                    SPACE += REFER[FSNAME]
                  else
                    SPACE += SPACES[FSNAME] + SPACES[ORIGIN]
                }
              }
            }
            if(OPTION_H == 1)
              printf "%s\t%s\t%s\t%s\t%s\t%s\n", DATASETNAME, ACTIVE, MOUNTPOINT, __show_units(SPACE), CREATION, BENAME
            else
              printf "%-" FSNAME_LENGTH "s %-6s %-" MOUNTPOINT_LENGTH "s %6s %s\t %s\n", DATASETNAME, ACTIVE, MOUNTPOINT, __show_units(SPACE), CREATION, BENAME
          }
        }
      }'
    ;;

  (create) # ------------------------------------------------------------------
    OPTION_r=0
    OPTION_e=0
    CLONEBE=""
    NEWBE=""
    BENICK=""
    REPLACEBENICK=0
    while [ $# -gt 0 ]; do
      case "$1" in
    create) ;;
        -e) shift
	    OPTION_e=1
	    CLONEBE="$1"
	    if [ -z "$CLONEBE" ]
	    then
	      __usage
	    fi
            # check if argument for -e option is full path dataset
            # argument for -e option must be 'beName' or 'beName@snapshot'
            if echo ${CLONEBE} | grep -q "/" 2> /dev/null
            then
               __usage
            fi
            __be_exist ${POOL}/${BEDS}/${CLONEBE}
            ;;
        -r) OPTION_r=1
            ;;
         *) if [ -z "$NEWBE" ]
	    then
               NEWBE="$1"
	       shift
               continue
	    fi
	    if [ -z "$BENICK" ]
	    then
               BENICK="${1}"
               if __be_nickname_exist "${BENICK}"
               then
		 if [ ${OPTION_r} -ne 1 ]
                 then
                   echo "ERROR: Boot environment nickname '${BENICK}' already exists"
                   exit 1
                 fi
               fi
	       shift
               continue
	    fi
	    __usage
            ;;
      esac
      shift
    done

    if [ -z "$NEWBE" ] ; then
       __usage
    fi

    if echo "$NEWBE" | grep -q " "
    then
       echo "ERROR: White-space in dataset name not permitted"
       exit 1
    fi

    # Do some sanity checking
    if [ ${OPTION_r} -eq 1 ]
    then
      if [ -z "${NEWBE}" -o -z "${BENICK}" ]
      then
        echo "ERROR: -r option requires both a <bename> and <nickname>"
        exit 1
      fi
    fi
    if [ "${NEWBE}" = "${BENICK}" ]
    then
      echo "ERROR: The dataset / nickname should not be identical"
      exit 1
    fi

    FROMBE=""
    if [ "${OPTION_e}" -eq 1 ]
    then
      if zfs list -H -o name ${POOL}/${BEDS}/${NEWBE} 1> /dev/null 2> /dev/null
      then
        echo "ERROR: Boot environment '${NEWBE}' already exists"
        exit 1
      fi
      FROMBE="${POOL}/${BEDS}/${CLONEBE}"
    else
      # Creating from the ROOTFS
      if __be_snapshot ${NEWBE}
      then
        if ! zfs snapshot -r ${POOL}/${BEDS}/${NEWBE} 1> /dev/null 2> /dev/null
        then
          echo "ERROR: Cannot create '${NEWBE}' recursive snapshot"
          exit 1
        fi
      fi
      FROMBE="${ROOTFS}"
    fi

    if [ "${OPTION_r}" -eq 1 ]
    then
      if __be_nickname_exist "${BENICK}"
      then
        echo "ERROR: Boot environment nickname '${BENICK}' already exists"
        exit 1
      fi
      if ! __be_get_nickname ${FROMBE} 1> /dev/null 2>/dev/null
      then
	# Try an auto-generated nick-name
        BENICKNAME="nick-`echo ${FROMBE} | rev | cut -d "/" -f 1 | rev`"
        if __be_nickname_exist "${BENICKNAME}"
        then
          echo "ERROR: Boot environment nickname '${BENICKNAME}' already exists"
          exit 1
        fi
      fi
      if [ "${BENICKNAME}" = "${NEWBE}" ]
      then
          echo "ERROR: The new nickname cannot be the same as the old BE nickname."
          exit 1
      fi
      OLDBENICK="${BENICK}"
      BENICK="${BENICKNAME}"
      REPLACEBENICK=1
    fi

    __be_new ${FROMBE} ${POOL}/${BEDS}/${NEWBE}
    echo "Created successfully"
    ;;

  (activate) # ----------------------------------------------------------------
    GOTNICK="NO"
    if [ ${#} -ne 2 -a ${#} -ne 3 ]
    then
      __usage
    fi

    if [ ${#} -eq 3 ]
    then
      if [ "${2}" != "-n" ]
      then
        __usage
      fi
      if ! __convert_be_nickname "${3}"
      then
         echo "ERROR: -n specified, but no BE nickname match found"
         exit 1
      fi
      ACTBE="${NICKDATASET}"
      GOTNICK="YES"
    else
      if [ "${2}" = "-n" ]
      then
        __usage
      fi
      ACTBE="${2}"
    fi

    if [ "${NICKNAME_ONLY}" = YES -a "${GOTNICK}" = "NO" ]
    then
      if ! __convert_be_nickname "${ACTBE}"
      then
         echo "ERROR: NICKNAME_ONLY set, but no BE nickname match found"
         exit 1
      fi
      ACTBE="${NICKDATASET}"
    fi

    __be_exist ${POOL}/${BEDS}/${ACTBE}
    if [ "${BOOTFS}" = "${POOL}/${BEDS}/${ACTBE}" ]
    then
      echo "Already activated"
      exit 0
    else
      if __be_mounted ${POOL}/${BEDS}/${ACTBE}
      then
        MNT=$( mount | grep -E "^${POOL}/${BEDS}/${ACTBE} " | awk '{print $3}' )
        if [ "${MNT}" != "/" ]
        then
          # boot environment is not current root and its mounted
          echo "Attempt to unmount boot environment '${2}' mounted at '${MNT}'"
          if ! umount ${MNT} 1> /dev/null 2> /dev/null
          then
            echo "ERROR: Unable to unmount boot environment '${2}' mounted at '${MNT}'"
            echo "ERROR: Cannot activate manually mounted boot environment '${2}'"
            exit 1
          fi
        echo "Gracefully unmounted boot environment '${2}' from '${MNT}' mount point"
        fi
      fi
      # do not change root (/) mounted boot environment mountpoint
      if [ "${ROOTFS}" != "${POOL}/${BEDS}/${ACTBE}" ]
      then
        TMPMNT=$( mktemp -d -t BE-${ACTBE} )
        if ! mkdir -p ${TMPMNT} 2> /dev/null
        then
          echo "ERROR: Cannot create '${TMPMNT}' directory"
          exit 1
        fi
        MOUNT=0
        while read FS MNT TYPE OPTS DUMP FSCK;
        do
          if [ "${FS}" = "${POOL}/${BEDS}/${ACTBE}" ]
          then
            MOUNT=${MNT}
            break
          fi
        done << EOF
$( mount -p )
EOF
        if [ ${MOUNT} -eq 0 ]
        then
          zfs set canmount=noauto ${POOL}/${BEDS}/${ACTBE}
          zfs set mountpoint=${TMPMNT} ${POOL}/${BEDS}/${ACTBE}
          zfs mount ${POOL}/${BEDS}/${ACTBE}
        else
          TMPMNT=${MOUNT}
        fi
        if [ -f /boot/zfs/zpool.cache ]
        then
          cp /boot/zfs/zpool.cache ${TMPMNT}/boot/zfs/zpool.cache
        else
          rm -f ${TMPMNT}/boot/zfs/zpool.cache
        fi
        LOADER_CONFIGS=${TMPMNT}/boot/loader.conf
        if [ -f ${TMPMNT}/boot/loader.conf.local ]
        then
          LOADER_CONFIGS="${LOADER_CONFIGS} ${TMPMNT}/boot/loader.conf.local"
        fi
        sed -i '' -E s/"^vfs.root.mountfrom=.*$"/"vfs.root.mountfrom=\"zfs:${POOL}\/${BEDS}\/${ACTBE##*/}\""/g ${LOADER_CONFIGS}
        if [ ${MOUNT} -eq 0 ]
        then
          zfs umount ${POOL}/${BEDS}/${ACTBE}
          zfs set mountpoint=/ ${POOL}/${BEDS}/${ACTBE}
        fi
      fi
      if ! zpool set bootfs=${POOL}/${BEDS}/${ACTBE} ${POOL} 1> /dev/null 2> /dev/null
      then
        echo "ERROR: Failed to activate '${2}' boot environment"
        exit 1
      fi
    fi
    # execute ZFS LIST only once
    ZFS_LIST=$( zfs list -t filesystem -H -o name -r ${POOL}/${BEDS} )
    # disable automatic mount on all inactive boot environments
    echo "${ZFS_LIST}" \
      | grep -v "^${POOL}/${BEDS}$" \
      | grep -v "^${POOL}/${BEDS}/${ACTBE}$" \
      | grep -v "^${POOL}/${BEDS}/${ACTBE}/" \
      | while read NAME
        do
          zfs set canmount=noauto ${NAME}
        done
    # enable automatic mount for active boot environment and promote it
    echo "${ZFS_LIST}" \
      | grep -E "^${POOL}/${BEDS}/${ACTBE}(/|$)" \
      | while read NAME
        do
          # If we are using GRUB, don't set canmount=on, since it clobbers
          # what we set in grub.cfg for vfs.root.mountfrom
          if [ -e /boot/grub/grub.cfg ]
          then
            zfs set canmount=noauto ${NAME}
          else
            zfs set canmount=on ${NAME}
          fi
          while __be_clone ${NAME}
          do
            zfs promote ${NAME}
          done
        done
    __check_boot_updates
    echo "Activated successfully"
    ;;

  (destroy) # -----------------------------------------------------------------
    if [ ${#} -ne 2 -a ${#} -ne 3 -a ${#} -ne 4 ]
    then
      __usage
    fi
    FORCE="NO"
    GOTNICK="NO"

    case ${#} in
      (2) if [ "${2}" = "-n" -o "${2}" = "-F" ]
          then
            __usage
          fi
	  DESTROY="${2}"
          ;;
      (3) if [ "${2}" = "-n" ]
          then
            if ! __convert_be_nickname "${3}"
            then
              echo "ERROR: -n specified, but no BE nickname match found"
              exit 1
            fi
            DESTROY="${NICKDATASET}"
            GOTNICK="YES"
	  elif [ "${2}" = "-F" ] ; then
            FORCE="YES"
            DESTROY="${3}"
          else
            __usage
          fi
          ;;
      (4) if [ "${2}" = "-n" -a "${3}" = "-F" ]
          then
            if ! __convert_be_nickname "${4}"
            then
              echo "ERROR: -n specified, but no BE nickname match found"
              exit 1
            fi
            DESTROY="${NICKDATASET}"
            FORCE="YES"
            GOTNICK="YES"
	  elif [ "${2}" = "-F" -a "${3}" = "-n" ] ; then
            if ! __convert_be_nickname "${4}"
            then
              echo "ERROR: -n specified, but no BE nickname match found"
              exit 1
            fi
            DESTROY="${NICKDATASET}"
            FORCE="YES"
            GOTNICK="YES"
          else
            __usage
          fi
          ;;
    esac

    if [ "${NICKNAME_ONLY}" = YES -a "${GOTNICK}" = "NO" ]
    then
      if ! __convert_be_nickname "${DESTROY}"
      then
         echo "ERROR: NICKNAME_ONLY set, but no BE nickname match found"
         exit 1
      fi
      DESTROY="${NICKDATASET}"
    fi

    __be_exist ${POOL}/${BEDS}/${DESTROY}
    if [ "${FORCE}" != "YES" ] ; then
        echo "Are you sure you want to destroy '${DESTROY}'?"
        echo -n "This action cannot be undone (y/[n]): "
        read CHOICE
    else
        CHOICE="y"
    fi

    if [ "${BOOTFS}" = "${POOL}/${BEDS}/${DESTROY}" ]
    then
      echo "ERROR: Cannot destroy active boot environment"
      exit 1
    fi
    case ${CHOICE} in
      (Y|y|[Yy][Ee][Ss])
        # destroy snapshot or boot environment
        if __be_snapshot ${POOL}/${BEDS}/${DESTROY}
        then
          # destroy desired snapshot
          if ! zfs destroy -r ${POOL}/${BEDS}/${DESTROY} 1> /dev/null 2> /dev/null
          then
            echo "ERROR: Snapshot '${2}' is origin for other boot environment"
            exit 1
          fi
        else
          if __be_clone ${POOL}/${BEDS}/${DESTROY}
          then
            # promote clones dependent on snapshots used by destroyed boot environment
            zfs list -H -t filesystem,snapshot,volume -o name,origin -r ${POOL} \
              | while read NAME ORIGIN
                do
                  if echo "${ORIGIN}" | grep -q -E "${POOL}/${BEDS}/${DESTROY}(/.*@|@)" 2> /dev/null
                  then
                    zfs promote ${NAME}
                  fi
                done
            # get origins used by destroyed boot environment
            ORIGIN_SNAPSHOTS=$( zfs list -H -t filesystem,snapshot,volume -o origin -r ${POOL}/${BEDS}/${DESTROY} | grep -v '^-$' | awk -F "@" '{print $2}' | sort -u )
          fi
          # check if boot environment was created from existing snapshot
          ORIGIN=$( zfs list -H -o origin ${POOL}/${BEDS}/${DESTROY} )
          CREATION=$( zfs list -H -o creation ${POOL}/${BEDS}/${DESTROY} )
          CREATION=$( date -j -f "%a %b %d %H:%M %Y" "${CREATION}" +"%Y-%m-%d-%H:%M" )
          SNAPSHOT_NAME=$( echo "${ORIGIN}" | cut -d '@' -f 2 | sed -E 's/:[0-9]{2}$//g' )
          if [ "${2}" = "-F" ]
          then
            CHOICE=1
          elif [ "${SNAPSHOT_NAME}" != "${CREATION}" ]
          then
            ORIGIN=$( basename ${ORIGIN} )
            echo "Boot environment '${DESTROY}' was created from existing snapshot"
            echo -n "Destroy '${ORIGIN}' snapshot? (y/[n]): "
            read CHOICE
            case ${CHOICE} in
              (Y|y|[Yy][Ee][Ss])
                CHOICE=1
                ;;
              (*)
                CHOICE=0
                echo "Origin snapshot '${ORIGIN}' will be preserved"
                ;;
            esac
          else
            CHOICE=1
          fi
          # destroy boot environment
          zfs destroy -r ${POOL}/${BEDS}/${DESTROY}
           # check if boot environment is a clone
          if __be_clone ${POOL}/${BEDS}/${DESTROY}
          then
            # promote datasets dependent on origins used by destroyed boot environment
            ALL_ORIGINS=$( zfs list -H -t filesystem,snapshot,volume -o name,origin -r ${POOL} )
            echo "${ORIGIN_SNAPSHOTS}" \
              | while read S
                do
                  echo "${ALL_ORIGINS}" \
                    | grep "${S}" \
                    | awk '{print $1}' \
                    | while read I
                      do
                        zfs promote ${I}
                      done
                done
          fi
          # destroy origins used by destroyed boot environment
          SNAPSHOTS=$( zfs list -H -t snapshot -o name -r ${POOL} )
          echo "${ORIGIN_SNAPSHOTS}" \
            | while read S
              do
                echo "${SNAPSHOTS}" \
                  | grep "@${S}$" \
                  | while read I
                    do
                      if [ ${CHOICE} -eq 1 ]
                      then
                        zfs destroy ${I}
                      fi
                    done
              done
        fi
        __check_boot_updates
        echo "Destroyed successfully"
        ;;
      (*)
        echo "Boot environment '${DESTROY}' has not been destroyed"
        ;;
    esac
    ;;

  (export) # ------------------------------------------------------------------
    if [ ${#} -ne 3 ]
    then
      __usage
    fi

    beName="$2"
    fileOut="$3"

    # Check if this is a nickname
    if __convert_be_nickname "${4}"
    then
      beName="${NICKDATASET}"
    fi

    # Save the dataset as a ZFS send dump
    echo "Exporting BE: ${beName} -> ${fileOut}"
    if ! zfs send ${POOL}/${BEDS}/${beName} > ${fileOut}
    then
      echo "ERROR: Failed exporting BE to file: ${fileOut}"
      exit 1
    fi

    echo "Exported successfully to: ${fileOut}"
    ;;

  (import) # ------------------------------------------------------------------
    if [ ${#} -ne 3 ]
    then
      __usage
    fi

    fileIn="$2"
    beName="$3"

    if zfs list ${POOL}/${BEDS}/${beName} >/dev/null 2>/dev/null
    then
      echo "ERROR: BE ${beName} already exists!"
      exit 1
    fi

    if [ ! -e "${fileIn}" ]
    then
      echo "ERROR: File ${fileIn} does not exist!"
      exit 1
    fi

    # Import the dataset from a ZFS send dump
    echo "Importing BE: ${fileIn} -> ${beName}"
    if ! cat $fileIn | zfs recv -u ${POOL}/${BEDS}/${beName}
    then
      echo "ERROR: Failed importing BE from file: ${fileOut}"
      exit 1
    fi

    echo "Imported successfully: ${beName}"
    ;;

  (rename) # ------------------------------------------------------------------
    if [ ${#} -ne 3 -a ${#} -ne 4 ]
    then
      __usage
    fi

    RENAMENICK="NO"
    GOTNICK="NO"
    if [ ${#} -eq 4 ]
    then
      if [ "$2" != "-n" ]
      then
        __usage
      fi
      RENAMENICK="YES"
      if ! __convert_be_nickname "$3"
      then
         echo "ERROR: -n specified, but no BE nickname match found"
         exit 1
      fi
      oName="$3"
      nName="$4"
      GOTNICK="YES"
    else
      if [ "$2" = "-n" ]
      then
        __usage
      fi
      oName="$2"
      nName="$3"
    fi

    if [ "${NICKNAME_ONLY}" = YES -a "${GOTNICK}" = "NO" ]
    then
      if ! __convert_be_nickname "${oName}"
      then
         echo "ERROR: NICKNAME_ONLY set, but no BE nickname match found"
         exit 1
      fi
      RENAMENICK="YES"
    fi

    if [ "${RENAMENICK}" = "NO" ]
    then
      # Renaming a dataset

      if echo "${nName}" | grep -q " "
      then
         echo "ERROR: White-space in dataset name not permitted"
         exit 1
      fi
      __be_exist ${POOL}/${BEDS}/${oName}
      if [ "${BOOTFS}" = "${POOL}/${BEDS}/${oName}" ]
      then
        echo "ERROR: Renaming active boot environment is not supported"
        exit 1
      fi
      if zfs list -H -o name ${POOL}/${BEDS}/${nName} 2> /dev/null
      then
        echo "ERROR: Boot environment '${nName}' already exists"
        exit 1
      fi
      zfs rename ${POOL}/${BEDS}/${oName} ${POOL}/${BEDS}/${nName}
    else
      # Renaming a nickname
      __be_exist ${POOL}/${BEDS}/${NICKDATASET}
      if __be_nickname_exist "${nName}"
      then
        echo "ERROR: Boot environment nickname '${nName}' already exists"
        exit 1
      fi
      if ! zfs set beadm:nickname="${nName}" ${POOL}/${BEDS}/${NICKDATASET}
      then
        echo "ERROR: Unable to set nickname!"
        exit 1
      fi
    fi

    __check_boot_updates

    echo "Renamed successfully"
    ;;

  (mount) # ------------------------------------------------------------
    GOTNICK="NO"
    if [ ${#} -eq 3 ]
    then
      if [ "$2" = "-n" ]
      then
        if ! __convert_be_nickname "${3}"
        then
           echo "ERROR: -n specified, but no BE nickname match found"
           exit 1
        fi
        MOUNTBE=${NICKDATASET}
        GOTNICK="YES"
        TARGET=$( mktemp -d -t BE-${MOUNTBE} )
      else
        MOUNTBE="${2}"
	TARGET="${3}"
      fi
    elif [ ${#} -eq 4 ]
    then
      if [ "${2}" != "-n" ]
      then
	__usage
      fi
      if ! __convert_be_nickname "${3}"
      then
         echo "ERROR: -n specified, but no BE nickname match found"
         exit 1
      fi
      MOUNTBE=${NICKDATASET}
      GOTNICK="YES"
      TARGET="${4}"
    else
      if [ "${2}" = "-n" ]
      then
        __usage
      fi
      MOUNTBE="${2}"
      TARGET=$( mktemp -d -t BE-${MOUNTBE} )
    fi

    if [ "${NICKNAME_ONLY}" = YES -a "${GOTNICK}" = "NO" ]
    then
      if ! __convert_be_nickname "${MOUNTBE}"
      then
         echo "ERROR: NICKNAME_ONLY set, but no BE nickname match found"
         exit 1
      fi
      MOUNTBE="${NICKDATASET}"
    fi

    __be_exist "${POOL}/${BEDS}/${MOUNTBE}"
    if __be_mounted "${POOL}/${BEDS}/${MOUNTBE}"
    then
      MNT=$( mount | grep -E "^${POOL}/${BEDS}/${MOUNTBE} " | awk '{print $3}' )
      echo "Boot environment '${2}' is already mounted at '${MNT}'"
      exit 1
    fi
    if ! mkdir -p ${TARGET} 2> /dev/null
    then
      echo "ERROR: Cannot create '${TARGET}' mountpoint"
      exit 1
    fi
    if ! mount -t zfs ${POOL}/${BEDS}/${MOUNTBE} ${TARGET}
    then
      echo "ERROR: Cannot mount '${2}' at '${TARGET}' mountpoint"
      exit 1
    fi
    zfs list -H -o name,mountpoint -r ${POOL}/${BEDS}/${MOUNTBE} \
      | grep -v -E "[[:space:]](legacy|none)$" \
      | sort -n \
      | grep -E "^${POOL}/${BEDS}/${MOUNTBE}/" \
      | while read FS MOUNTPOINT
        do
          if [ "{FS}" != "${POOL}/${BEDS}/${MOUNTBE}" ]
          then
            INHERIT=$( zfs get -H -o source mountpoint ${FS} )
            if [ "${INHERIT}" = "local" ]
            then
              case ${MOUNTPOINT} in
                (legacy|none)
                  continue
                  ;;
                (*)
                  MOUNTPOINT="/$( echo "${FS}" | sed s^"${POOL}/${BEDS}/${MOUNTBE}/"^^g )"
                  ;;
              esac
            fi
          fi
          if ! mkdir -p ${TARGET}${MOUNTPOINT} 1> /dev/null 2> /dev/null
          then
            echo "ERROR: Cannot create '${TARGET}${MOUNTPOINT}' mountpoint"
            exit 1
          fi
          if ! mount -t zfs ${FS} ${TARGET}${MOUNTPOINT} 1> /dev/null 2> /dev/null
          then
            echo "ERROR: Cannot mount '${FS}' at '${TARGET}${MOUNTPOINT}' mountpoint"
            exit 1
          fi
        done
    echo "Mounted successfully on '${TARGET}'"
    ;;

  (umount|unmount) # ----------------------------------------------------------
    GOTNICK="NO"
    if [ ${#} -eq 2 ]
    then
      # we need this empty section for argument checking
      :
    elif [ ${#} -eq 3 -a "${2}" = "-f" ]
    then
      shift
    else
      __usage
    fi

    if [ ${#} -eq 3 ]
    then
      if [ "${2}" = "-n" ]
      then
        if ! __convert_be_nickname "${3}"
        then
           echo "ERROR: -n specified, but no BE nickname match found"
           exit 1
        fi
        UMOUNTBE=${NICKDATASET}
	GOTNICK="YES"
      elif [ "${2}" = "-f" ]
      then
        OPTS="-f"
        UMOUNTBE="${3}"
      else
	__usage
      fi
    elif [ ${#} -eq 4 ]
    then
      if [ "${2}" = "-n" -a "${3}" = "-f" ]
      then
        if ! __convert_be_nickname "${4}"
        then
           echo "ERROR: -n specified, but no BE nickname match found"
           exit 1
        fi
        UMOUNTBE=${NICKDATASET}
	GOTNICK="YES"
        OPTS="-f"
      elif [ "${2}" = "-f" -a "${3}" = "-n" ]
      then
        if ! __convert_be_nickname "${4}"
        then
           echo "ERROR: -n specified, but no BE nickname match found"
           exit 1
        fi
        UMOUNTBE=${NICKDATASET}
	GOTNICK="YES"
        OPTS="-f"
      else
        __usage
      fi
    else
      if [ "${2}" = "-n" ]
      then
        __usage
      fi
      UMOUNTBE="${2}"
    fi

    if [ "${NICKNAME_ONLY}" = YES -a "${GOTNICK}" = "NO" ]
    then
      if ! __convert_be_nickname "${UMOUNTBE}"
      then
         echo "ERROR: NICKNAME_ONLY set, but no BE nickname match found"
         exit 1
      fi
      UMOUNTBE="${NICKDATASET}"
    fi

    __be_exist "${POOL}/${BEDS}/${UMOUNTBE}"
    if ! __be_mounted "${POOL}/${BEDS}/${UMOUNTBE}"
    then
      echo "Boot environment '${2}' is not mounted"
      exit 1
    fi
    MOUNT=$( mount )
    MOUNTPOINT=$( echo "${MOUNT}" | grep -m 1 "^${POOL}/${BEDS}/${UMOUNTBE} on " | awk '{print $3}' )
    echo "${MOUNT}" \
      | awk '{print $1}' \
      | grep -E "^${POOL}/${BEDS}/${UMOUNTBE}(/|$)" \
      | sort -n -r \
      | while read FS
        do
          if ! umount ${OPTS} ${FS} 1> /dev/null 2> /dev/null
          then
            echo "ERROR: Cannot umount '${FS}' dataset"
            exit 1
          fi
        done
    echo "Unmounted successfully"
    # only delete the temporary mountpoint directory
    if echo "${MOUNTPOINT}" | grep -q -E "/BE-${UMOUNTBE}\.[a-zA-Z0-9]{8}" 1> /dev/null 2> /dev/null
    then
      # delete only when it is an empty directory
      if [ $( find ${MOUNTPOINT} | head | wc -l | bc ) -eq 1 ]
      then
        rm -r ${MOUNTPOINT}
      fi
    fi
    ;;

  (*) # -----------------------------------------------------------------------
    __usage
    ;;

esac
